
Career.Date = {
	/*
	// Desc : 유효한(존재하는) 월(月)인지 체크
	// @mm : 월(숫자값)
	// @return :     */
	IsValidMonth : function( mm )
	{
		if ( ! Career.Number.IsNumber( mm ) )
			return false;
		var m = parseInt(mm,10);
		return (m >= 1 && m <= 12);
	},

	/*
	// Desc : 유효한(존재하는) 일(日)인지 체크
	// @yyyy : 년
	// @mm : 월
	// @dd : 일
	// @return :
	*/
	IsValidDay : function(yyyy, mm, dd)
	{
		if ( ! Career.Number.IsNumber( yyyy ) )
			return false;
		if ( ! Career.Number.IsNumber( mm ) )
			return false;
		if ( ! Career.Number.IsNumber( dd ) )
			return false;
		var m = parseInt(mm,10) - 1;
		var d = parseInt(dd,10);
		var end = new Array(31,28,31,30,31,30,31,31,30,31,30,31);
		if ((yyyy % 4 == 0 && yyyy % 100 != 0) || yyyy % 400 == 0)
		{
			end[1] = 29;
		}
		return (d >= 1 && d <= end[m]);
	},

	/*
	// Desc : 유효한(존재하는) 시(時)인지 체크
	// @hh : 시
	// @return :
	*/
	IsValidHour : function(hh)
	{
		if ( ! Career.Number.IsNumber( hh ) )
		{
			return false;
		}
		var h = parseInt(hh,10);
		return (h >= 1 && h <= 24);
	},

	/*
	// Desc : 유효한(존재하는) 분(分)인지 체크
	// @mi : 분
	// @return :
	*/
	IsValidMin : function (mi)
	{
		if ( !Career.Number.IsNumber( mi ) )
			return false;
		var m = parseInt(mi,10);
		return (m >= 1 && m <= 60);
	},

	/*
	// Desc : 유효하는 날짜, 시간인지
	// @date : 12자리 날짜문자열(yyyyMMddHHmm)
	// @return :
	*/
	IsValidDateTime : function( date )
	{
		if ( !Career.Number.IsNumber( date ) )
			return false;
		var len = date.length;
		var year  = -1;
		var month = -1;
		var day   = -1;
		var hour  = -1;
		var min   = -1;
		if ( len > 12 )
			return false;
		if ( len >= 4 )
			year  = date.substring(0,4);
		if ( len > 4 )
			month = date.substring(4,6);
		if ( len > 6 )
			day   = date.substring(6,8);
		if ( len > 8 )
			hour  = date.substring(8,10);
		if ( len > 10 )
			min   = date.substring(10,12);
		if ( parseInt(year,10) >= 1900  &&
			( month == -1 || this.IsValidMonth(month) ) &&
			( day == -1   || this.IsValidDay(year,month,day) ) &&
			( hour == -1  || this.IsValidHour(hour) )  &&
			( min == -1   || this.IsValidMin(min) ) )
		{
			return true;
		}
		return false;
	},

	/*
	// Desc : Time 스트링(최대yyyyMMddHHmm까지 지원)을 자바스크립트 Date 객체로 변환,
	// @time: Time 형식의 String
	// @return : Data Object
	*/
	TimeObject : function(time)
	{
		var year  = 0;
		var month = 0;
		var day   = 1;
		var hour  = 0;
		var min   = 0;
		if ( (time+'').length == 0 )
		{
			return null;
		}
		else if ( (time+'').length < 4 )
		{
			year = time;
		}
		else
		{
			year = (time+'').substr(0,4);
		}

		if ( (time+'').length >= 6 )
			month = eval((time+'').substr(4,2)) - 1; /* 1월=0,12월=11     */
		if ( (time+'').length >= 8 )
			day   = eval((time+'').substr(6,2));
		if ( (time+'').length >= 10 )
			hour  = eval((time+'').substr(8,2));
		if ( (time+'').length >= 12 )
			min   = eval((time+'').substr(10,2));
		return new Date(year,month,day,hour,min);
	},

	/*
	// Desc : 입력한 날짜스트링을 전달받은 포멧의 스트링으로 변환 ex) DateString ( '20061012', 'YYYY-MM-DD' )
	// @str	:	입력날짜
	// @format : 입력값의 포멧 ( 년(y,Y), 월(M), 일(d,D), 시(h,H), 분(m)
	// @return : string
	*/
	FormattedDateString : function( str, format )
	{
		var y = '';
		var m = '';
		var d = '';
		var date = '';
		var frmt = '';
		date += Career.Number.GetNumber( str );
		for(var i = 0; i < format.length; i++)
		{
			var c =  format.charAt(i);
			if ( c == 'Y' || c == 'y' || c == 'M' || c =='D' || c == 'd' || c == 'h' || c == 'H' || c == 'm' )
			{
				frmt += '' + format.charAt(i);
			}
		}
		if ( date.length != frmt.length )
		{
			return '';
		}
		var rtnDate = '';
		var dateIndex = 0;
		for ( var i =0; i < format.length ; i++ )
		{
			var c = format.charAt(i) ;
			if ( c == 'Y' || c == 'y' || c == 'M' || c =='D' || c == 'd' || c == 'h' || c == 'H' || c == 'm' )
			{
				rtnDate += date.charAt(dateIndex) ;
				dateIndex++;
			}
			else
			{
				if ( format.length > dateIndex )
				{
					rtnDate += format.charAt(i);
				}
			}
		}
		return rtnDate;
	},

	/*
	// Desc : 년월(yyyyMM)을 입력받아 , x개월이후의 년월을 리턴
	// @yyyymm : 4자리 년월문자열(yyyyMM)
	// @nu : integer
	// @return : string (4자리 년월)
	*/
	AddMonth : function (yyyymm,nu)
	{
		var yyyy;
		var mm ;
		if ( yyyymm.length >= 4 )
		{
			yyyy = yyyymm.substring(0,4) +"" ;
		}
		else
		{
			return '';
		}

		if ( yyyymm.length >= 6 )
		{
			mm  = yyyymm.substring(4,6) +"" ;
		}
		else
		{
			mm = 0;
		}

		var strAddMonth = null ;
		var mok = parseInt( (parseInt(mm) + nu) / 12 );
		if ( mok < 0 || eval(mm)+nu < 0 ) mok+=-1;
		if ( eval(mm) + nu < 0 ) 		 -mok;

		var rmd = (eval(mm) + nu) % 12 ;
		if ( rmd == 0 )
		{
			if ( mok > 0 ) mok--;
			rmd = 12;
		}
		if( nu < 0 && eval(mm) + nu <= 0 )
		{
			if( (eval(mm) + nu)/12 <= 0 )
			{
				yyyy = eval(yyyy) + ((eval(mm) + nu)/12 - 1);
			}
			else
			{
				yyyy = eval(yyyy);
			}
		}
		else
		{
			yyyy = eval(yyyy)+mok ;
		}

		if ( rmd < 0 )
		{
			rmd = 12 + rmd ;
		}
		mm   = rmd < 10 ? "0"+rmd : rmd ;
		strAddMonth = yyyy.toString()+mm.toString() ;
		return strAddMonth ;
	},

	/*
	// Desc : 주어진 Time과 year,month,day 차이나는 Time를 Return
	// @DateString : 날짜 string(yyyyMMdd)
	// @nY : 년
	// @nM : 월
	// @nD : 일
	// @return : string
	*/
	AddDate : function(DateString,nY,nM,nD)
	{
		return this.AddDateTime( DateString, nY,nM,nD, 0, 0 );
	} ,

	/*
	// Desc : 주어진 Time 과 y년 m월 d일 h시 차이나는 Time을 리턴
	// AddDateTime('20000101000',0,0,-100,0) => 2000/01/01 00:00 으로부터 100일 전 Time
	// @time
	// @y  : 년
	// @M  : 월
	// @d  : 일
	// @h  : 시
	// @min: 분
	// @return :  string
	*/
	AddDateTime : function(time , y, M, d, h, min)
	{
		var date = this.TimeObject(time);
		date.setFullYear(date.getFullYear() + y); /* y년을 더함 */
			date.setMonth(date.getMonth() + M);       /* m월을 더함 */
			date.setDate(date.getDate() + d);         /* d일을 더함 */
			date.setHours(date.getHours() + h);       /* h시를 더함 */
			date.setMinutes(date.getMinutes() + min );  /* m분을 더함 */
		if ( (time+'').length >= 12 )
		{
			strdate = date.getFullYear() +'' +
				((date.getMonth()+1) > 9 ? ( date.getMonth()+1 ) : '0'+(date.getMonth()+1) ) +
				( date.getDate()     > 9 ? date.getDate()    : '0' + date.getDate()) +
				( date.getHours()    > 9 ? date.getHours()   : '0' + date.getHours()) +
				( date.getMinutes()  > 9 ? date.getMinutes() : '0' + date.getMinutes());
			return this.FormattedDateString( strdate ,'yyyyMMddHHmm');
		}
		else if ( (time+'').length <= 10 && (time+'').length > 8 )
		{
			strdate = date.getFullYear() +'' +
				((date.getMonth()+1) > 9 ? ( date.getMonth()+1 ) : '0'+(date.getMonth()+1)) +
				( date.getDate()     > 9 ? date.getDate() : '0' + date.getDate() ) +
				( date.getHours()    > 9 ? date.getHours(): '0' + date.getHours()) ;
			return this.FormattedDateString(strdate,'yyyyMMddHH');
		}
		else if ( (time+'').length <= 8 && (time+'').length > 6 )
		{
			strdate = date.getFullYear()+'' +
				((date.getMonth()+1) > 9 ? ( date.getMonth()+1 ) : '0'+(date.getMonth()+1)) +
				( date.getDate()     > 9 ? date.getDate() : '0' + date.getDate() ) ;
			return this.FormattedDateString(strdate,'yyyyMMdd');
		}
		else if ( (time+'').legnth <= 6 && (time+'').length > 4 )
		{
			strdate = date.getFullYear() +'' +
				((date.getMonth()+1) > 9 ? ( date.getMonth()+1 ) : '0'+(date.getMonth()+1)) ;
			return this.FormattedDateString(strdate,'yyyyMM');
		}
		else if ( (time+'').length == 4 )
		{
			strdate = date.getFullYear() +'' ;
			return this.FormattedDateString( ''+ strdate,'yyyy');
		}
		else
		{
			return '';
		}
	} ,

	/*
	// Desc : 자바스크립트 Date 객체를 스트링으로 변환 ex) DateTimeString( '19981203','yyyy-MM-dd');
	// @date : JavaScript Date Object    // @format : string / 년-yY, 월-M, 일-Dd, 시-Hh, 분-m
	// @return : string
	*/
	DateTimeString : function( date, format )
	{
		var year  = date.getFullYear();
		var month = date.getMonth() + 1;
		/* 1월=0,12월=11이므로 1 더함 */
		var day   = date.getDate();
		var hour  = date.getHours();
		var min   = date.getMinutes();
		var sec	  = date.getSeconds();
		var tmpDate = '';
		var tmpFormat = '';
		for ( var i =0; i < format.length ; i++ )
		{
			c = format.charAt( i );
			if ( c == 'Y' || c == 'y' || c == 'M' || c =='m' || c == 'D' || c == 'd' || c =='H' || c =='h' || c =='S' || c == 's' )
			{
				tmpFormat += c;
			}
		}

		var beforChar = null;
		var startIndex = 0;
		var endIndex = 0;
		for ( var i = 0; i <= tmpFormat.length ; i++ )
		{
			if ( beforChar == null )
			{
				beforChar = tmpFormat.charAt( i );
				startIndex = i;
				endIndex = i;
				continue;
			}
			else
			{
				endIndex = i;
				if ( beforChar == tmpFormat.charAt( i ) )
				{
				}
				else
				{
					if ( beforChar == 'Y' || beforChar == 'y' )
					{
						if ( endIndex - startIndex == 2 )
						{
							tmpDate += year.substring( 2 );
						}
						else if ( endIndex - startIndex == 4 )
						{
							tmpDate += year;
						}
					}
					else if ( beforChar == 'M' )
					{
						tmpDate += ((month > 10 ) ? '' + month : '0'+month ) ;
					}
					else if ( beforChar == 'D' || beforChar == 'd' )
					{
						tmpDate += (( day > 10 ) ? '' + day : '0'+ day );
					}
					else if ( beforChar == 'H' || beforChar == 'h' )
					{
						tmpDate += (( hour > 10 ) ? ''+ hour : '0' + hour );
					}
					else if ( beforChar == 'm' )
					{
						tmpDate += (( min > 10 ) ? '' + min : '0' + min );
					}
					else if ( beforChar == 'S' || beforChar == 's' )
					{
						tmpDate += (( sec > 10 ) ? '' + sec : '0' + sec );
					}
					startIndex = i;
				}
			}

			beforChar = tmpFormat.charAt( i );
		}

		return this.FormattedDateString( tmpDate, format );
	},

	/*
	// Desc : 해당 년월(yyyyMM)의 마지막날짜 가져오기
	// @yyyyMM : 년월
	// @return :
	*/
	LastDay : function( yyyyMM )
	{
		var end = new Array(31,28,31,30,31,30,31,31,30,31,30,31);
		var yyyy = yyyyMM.substring(0,4);
		var mm   = yyyyMM.substring(4,6);
		var im   = eval(mm) - 1;
		if ( ( 	( yyyy % 4 == 0) && ( yyyy % 100 != 0) 	) || (yyyy % 400 == 0) )
		{
			end[1] = 29;
		}
		return end[im];
	},

	/*
	// Desc : 현재 시각을 Date Object 형식으로 리턴
	// @return :
	*/
	Now : function()
	{
		curdate = new Date();
		return curdate;
	},

	/*
	// Desc : 현재 年을 YYYY형식으로 리턴
	// @return : integer 년
	*/
	Year : function()
	{
		var date = this.Now();
		return  date.getFullYear();
	},

	/*
	// Desc : 현재 月을 숫자로리턴
	// @return : integer 월
	*/
	Month : function ()
	{
		return (this.Now().getMonth()+1);
	},

	/*
	// Desc : 현재 日을 숫자로 리턴
	// @return : integer 일
	*/
	Date : function ()
	{
		return this.Now().getDate();
	},

	/*
	// Desc : 현재 時를 숫자로 리턴
	// @return : integer 시
	*/
	Hour : function ()
	{
		return this.Now().getHours();
	},

	/*
	// Desc : 두 Time이 몇 개월 차이나는지 구함, time1이 time2보다 크면(미래면) minus(-)
	// @time1 : 날짜 string
	// @time2 : 날짜 string
	// @return : integer
	*/
	MonthInterval : function(time1,time2)
	{
		var date1 = this.TimeObject(time1);
		var date2 = this.TimeObject(time2);
		var years  = date2.getFullYear() - date1.getFullYear();
		var months = date2.getMonth() - date1.getMonth();
		return (years * 12 + months );
	},

	/*
	// Desc : 두 Time이 며칠 차이나는지 구함, time1이 time2보다 크면(미래면) minus(-)
	// @time1 : 날짜 string
	// @time2 : 날짜 string
	// @return : integer
	*/
	DayInterval : function (time1,time2)
	{
		var date1 = this.TimeObject(time1);
		var date2 = this.TimeObject(time2);
		var day   = 1000 * 3600 * 24; /* 24시간 */
		return parseInt((date2 - date1) / day, 10);
	},

	/*
	// Desc : 입력받은 날짜의 요일을 리턴(월,화,수...)
	// @yyyyMMdd : 날짜 string
	// @return :
	*/
	DayOfWeek : function ( val )
	{
		var rtnstr = '';
		var datestr = '';
		if ( val.length >= 8 )
		{
			datestr = ''+ (this.TimeObject( val ).getDay());
			if ( eval(datestr) == 0 )
			{
				rtnstr ='일';
			}
			else if ( eval(datestr) == 1 )
			{
				rtnstr ='월';
			}
			else if ( eval(datestr) == 2 )
			{
				rtnstr ='화';
			}
			else if ( eval(datestr) == 3 )
			{
				rtnstr ='수';
			}
			else if ( eval(datestr) == 4 )
			{
				rtnstr ='목';
			}
			else if ( eval(datestr) == 5 )
			{
				rtnstr ='금';
			}
			else if ( eval(datestr) == 6 )
			{
				rtnstr ='토';
			}
			else
			{
				rtnstr ='';
			}
		}
		return rtnstr;
	}
};