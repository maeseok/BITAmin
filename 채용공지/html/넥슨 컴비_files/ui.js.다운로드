//include html: ui 개발에서만 사용
const includeHTML = function() {
    var elements = $('div[data-include-path]');
    if(elements) {
        for (var i = 0; i < elements.length; i++) {
            var includePath = $(elements[i]).attr('data-include-path');
            $(elements[i]).load(includePath);
        }
    }
}

//globalHeader > 관계사
const globalHeader_familySite = function() {
    const $parent = document.querySelector("#globalHeader .familySite > button");
    if($parent){
        $parent.addEventListener('mouseenter', function(event) {
            const $target = event.target.parentNode.querySelector('button');
            $target.setAttribute('data-hover', 'true');
        });
        if($parent.parentNode)
        $parent.parentNode.addEventListener('mouseleave', function(event) {
            const $target = event.target.querySelector('button');
            $target.setAttribute('data-hover', 'false');
        });
    }
}

//dropdown menu 공통
const dropdownMenu = function() {
    const $parent = document.querySelectorAll('[data-input-type="dropdown"]');
    $parent.forEach(function($item) {
        if ($item.querySelector('.title:not(a)') !== null) {
            $item.querySelector('.title:not(a)').addEventListener('click', function(event) {
                const $target = event.target.parentNode;
                const visibleValue = $target.getAttribute('data-detail');
                $target.setAttribute('data-detail', (visibleValue === 'true') ? 'false' : 'true');
            });
        }
        if ($item.querySelector('a.title') !== null) {
            $item.querySelector('a.title').addEventListener('mouseover', function(event) {
                const $target = event.target.parentNode;
                $target.setAttribute('data-detail', 'true');
            });
        }
        $item.addEventListener('mouseleave', function(event) {
            const $target = event.target;
            $target.setAttribute('data-detail', 'false');
        });
    });
}

//비밀번호 미리보기 기능 토글 버튼
const passwordPreview = function() {
    const $target = document.querySelectorAll('[data-input-type="password"]');
    if($target)
        $target.forEach(function($item) {
            $item.querySelector('button.preview').addEventListener('click', function() {
                const type = $item.querySelector('input').getAttribute('type');
                $item.querySelector('input').setAttribute('type', (type === 'password') ? 'text' : 'password');
            });
        });
}

//layer
const layer = function() {
    const layerOpen = function() {
        const $target = document.querySelectorAll('[data-description]');

        if($target)
            $target.forEach(function($item) {
                $item.addEventListener('click', function() {
                    const layerId = $item.getAttribute('data-description');
                    const $layer = document.querySelector('#' + layerId);
                    $layer.setAttribute('data-visibled', 'true');
                    document.getElementsByTagName('body')[0].setAttribute('data-dialog', 'opened');
                    //레이어를 열 때마다 레이어의 스크롤 위치를 리셋
                    $layer.scrollTop = 0;
                });
            });
    }
    const render = function() {
        const $target = document.querySelectorAll('.layerContainer');

        if($target)
            $target.forEach(function($item) {
                const $container = document.createElement('section');
            
                const reset = function(value) { //닫기 버튼 동작
                    $container.setAttribute('data-visibled', value);
                    
                    if (value) {
                        document.getElementsByTagName('body')[0].setAttribute('data-dialog', 'opened');
                    }
                    else {
                        document.getElementsByTagName('body')[0].removeAttribute('data-dialog');
                    }
                }
            
                $container.setAttribute('class', 'dialogContainer');
                $container.setAttribute('id', $item.getAttribute('id'));
                $container.setAttribute('data-visibled', $item.getAttribute('data-visibled') === null ? 'false': $item.getAttribute('data-visibled'));
            
                const $layer = document.createElement('div');
                $layer.setAttribute('class', 'dialog');
                if ($item.getAttribute('data-size') !== undefined) {
                    $layer.setAttribute('data-size', $item.getAttribute('data-size'));
                }
                $layer.innerHTML = $item.innerHTML;
            
                const $close = document.createElement('button');
                $close.setAttribute('type', 'button');

                if ($item.getAttribute('data-size') !== 'fullPage') {
                    $close.setAttribute('class', 'buttonIcon');
                    $($layer).prepend($close);
                }
                else {
                    $close.setAttribute('class', 'button box tinted large');
                    $close.innerHTML = '확인';
                    const $footer = document.createElement('footer');
                    $($footer).append($close);
                    $($layer).append($footer);
                }
                $close.addEventListener('click', function() { //닫기 버튼
                    reset(false);
                });
                $($container).append($layer);
            
                $(document.getElementsByTagName('body')[0]).append($container);
                $container.addEventListener('click', function(event) {
                    const $target = event.target;
                    
                    if ($target.getAttribute('class') === 'dialogContainer') {
                        reset(false);
                    }
                });
            
                //화면 로드 시 열려있는 레이어 팝업이 있다면 body 스크롤을 잠금 처리
                if ($container.getAttribute('data-visibled') === 'true'
                    && document.getElementsByTagName('body')[0].getAttribute('data-dialog') !== 'opened') {
                        reset(true);
                }

                $item.parentNode.removeChild($item);
            });
    }

    render();
    layerOpen();
}

//alert layer
const dialog = function() {
    const alertOpen = function() {
        const $target = document.querySelectorAll('[data-alert');
        if($target)
            $target.forEach(function($button) {
                $button.addEventListener('click', function(event) {
                    const dialogId = event.currentTarget.getAttribute('data-alert');
                    const $dialog = document.querySelector('#' + dialogId);
                    
                    $dialog.setAttribute('data-visibled', true);
                    document.getElementsByTagName('body')[0].setAttribute('data-alert', 'opened');
                    //레이어를 열 때마다 레이어의 스크롤 위치를 리셋
                    $dialog.scrollTop = 0;
                });
            });
    }
    const render = function() {
        const $container = document.querySelectorAll('.alertContainer');
        if($container)
            $container.forEach(function($dialog) {
                const $dialogContainer = document.createElement('section');

                const reset = function(value) { //닫기 버튼 동작
                    $dialogContainer.setAttribute('data-visibled', value);
                    
                    if (value) {
                        document.getElementsByTagName('body')[0].setAttribute('data-dialog', 'opened');
                    }
                    else {
                        document.getElementsByTagName('body')[0].removeAttribute('data-dialog');
                    }
                }

                $dialogContainer.setAttribute('class', 'alertDialogContainer');
                $dialogContainer.setAttribute('id', $dialog.getAttribute('id'));
                const visibled = $dialog.getAttribute('data-visibled');
                $dialogContainer.setAttribute('data-visibled', visibled !== null ? visibled : false);
                const $layer = document.createElement('div');
                $layer.setAttribute('class', 'dialog');
                $layer.innerHTML = $dialog.innerHTML;
                $dialog.parentNode.removeChild($dialog);
                $($dialogContainer).append($layer);
        
                $(document.getElementsByTagName('body')[0]).append($dialogContainer);
                if($dialogContainer.querySelectorAll('footer > .button.box'))
                    $dialogContainer.querySelectorAll('footer > .button.box').forEach(function($button) {
                        $button.addEventListener('click', function() {
                            reset(false);
                        });
                    });

                $dialogContainer.addEventListener('click', function(event) {
                    const $target = event.target;
                    
                    if ($target.getAttribute('class') === 'alertDialogContainer') {
                        reset(false);
                    }
                });
            });
    }

    render();
    alertOpen();
}

//tooltip
const tooltip = function() {
    const $parent = document.querySelectorAll('*[data-tooltip]');
    if($parent)
        $parent.forEach(function($item, $index) {
            $item.addEventListener('mouseenter', function(event) {
                const $target = event.target;
                const desc = $target.getAttribute('data-tooltip');
                const clientRect = $target.getBoundingClientRect();
                const relativeTop = clientRect.top;
                const scrolledTopLength = window.pageYOffset;
                const absoluteTop = scrolledTopLength + relativeTop;

                const $tooltip = document.createElement('div');
                $tooltip.setAttribute('id', 'tooltip' + $index);
                $tooltip.setAttribute('class', 'tooltips');
                $tooltip.innerHTML = desc;
                $(document.getElementsByTagName('body')[0]).append($tooltip);
                $tooltip.style.top = absoluteTop - $tooltip.offsetHeight/2 + 11 + 'px';
                $tooltip.style.left = clientRect.left + 29 + 'px';
            });
            $item.addEventListener('mouseleave', function() {
                const $tooltip = document.querySelector('#tooltip' + $index);
                $tooltip.parentNode.removeChild($tooltip);
            });
        });
}

//input byteCheck
const inputByteCheck = function() {
    const $container = document.querySelectorAll('[data-input-type="byteCheck"]');
    if($container)
        $container.forEach(function($item) {
		if ($($item).find('.bytecheck').length == 0)
		{
            const $byteCheck = document.createElement('span');
            if ($item.querySelector(':first-child'))
                $byteCheck.innerHTML = '0 / ' + $item.querySelector(':first-child').getAttribute('maxlength');

			$($byteCheck).addClass('bytecheck');
            $($item).append($byteCheck);

            const byteCheck = function($target) {
                const byte = $target.value.length;

                $byteCheck.innerHTML = byte +' / '+ $target.getAttribute('maxlength');
            }
            if($item.querySelector('input')) {
                $item.querySelector('input').addEventListener('input', function(event) {
                    byteCheck(event.target);
                });
				byteCheck($item.querySelector('input'));
			}
            if($item.querySelector('textarea')) {
                $item.querySelector('textarea').addEventListener('input', function(event) {
                    byteCheck(event.target);
                });
				byteCheck($item.querySelector('textarea'));
			}
		}

        });
    }

//input file
const inputFile = function() {
    const $container = document.querySelectorAll('[data-input-type="file"]');
    if($container)
        $container.forEach(function($item) {
            const $target = $item.querySelector('input[type="file"]');
            const $filePath = document.createElement('span');
            $filePath.setAttribute('class', 'filePath');
            $filePath.innerHTML = $target.getAttribute('placeholder');
            $($item).append($filePath);

            $target.addEventListener('input', function(event) {
                $filePath.innerHTML = event.target.value;
            });
        });
}

//go top button
const goTop = function() {
    const $gotoTop = document.querySelector('#gotoTop');
    if ($gotoTop !== null) {
        window.addEventListener('scroll', function() {
            if (window.scrollY < 40) {
                $gotoTop.setAttribute('disabled', '');
            }
            else {
                $gotoTop.removeAttribute('disabled');
            }
        });
        $gotoTop.addEventListener('click', function() {
            window.scrollTo({
                top:0,
                left:window.scrollX,
                behavior: 'smooth',
            });
        });
    }
}

//넥슨 정보 > 하위메뉴 스크롤 체크
const scrollTargetCheck = function() {
    const $button = document.querySelectorAll('[data-target="true"]');
    if($button)
        $button.forEach(function($item) {
            const href = $item.getAttribute('href');
            const hash = href.split("#");

            const documentHref = document.location.href.split('/');
            const documentHash = documentHref[documentHref.length - 1].split('#')[0];

            if (documentHash === hash[0].substr(1, hash[0].length - 1)) {
                $item.setAttribute('onClick', 'return false');
                const $target = document.querySelector('#' + hash[hash.length - 1]);
                const offsetTop = window.scrollY - 64 + $target.getBoundingClientRect().top;
                $item.addEventListener('click', function() {
                    window.scrollTo({
                        top:offsetTop,
                        left:window.scrollX,
                        behavior: 'smooth',
                    });
                });
                const targetActive = function() {
                    if (window.scrollY > offsetTop && 
                        window.scrollY <= offsetTop + $target.offsetHeight) {
                            $item.setAttribute('data-active', 'true');
                        }
                    else {
                        $item.setAttribute('data-active', 'false');
                    }
                }
                targetActive();
                
                window.addEventListener('scroll', function() {
                    targetActive();
                });
            }
        });
}

//toggle list
const toggleList = function($items) {
    $items.forEach(function($item) {
		if($($item).find("button").hasClass('anchor'))
	        $item.querySelector('.button.anchor').addEventListener('click', function() {
	            const toggle = $item.getAttribute('data-detail');
	            $items.forEach(function($item) {
	                $item.setAttribute('data-detail', 'false');
	            });
	            $item.setAttribute('data-detail', toggle !== 'true' ? 'true' : 'false');
	        });
    });
}

window.addEventListener('load', function() {
	var agent = navigator.userAgent.toLowerCase();
	if ((navigator.appName == 'Netscape' && navigator.userAgent.search('Trident') != -1) || (agent.indexOf("msie") != -1) ) {
		chkIEdate();
		//$("input[type=date]").datepicker({ dateFormat: "yy-mm-dd"});
	}

    includeHTML();

    this.setTimeout(function() { //TODO: include html 로드 후 실행되어야 해서 임시로 붙여둠. 이후 제거해야 함.
        dropdownMenu();
        globalHeader_familySite();
        layer();
        dialog();
        tooltip();
        inputByteCheck();
        passwordPreview();
        inputFile();
        goTop();
        scrollTargetCheck();

        //직무 소개
        toggleList(document.querySelectorAll('.jobItem'));

        //faq
        toggleList(document.querySelectorAll('.faqList li'));
    }, 400);
});

if (window.NodeList && !NodeList.prototype.forEach) {
	NodeList.prototype.forEach = Array.prototype.forEach;
}

function chkIEdate(){
	var agent = navigator.userAgent.toLowerCase();
	if ((navigator.appName == 'Netscape' && navigator.userAgent.search('Trident') != -1) || (agent.indexOf("msie") != -1) ) {
		if (!$("input[type=date]").attr("readonly"))
			$("input[type=date]").datepicker({ 
	            changeMonth: true,
	            changeYear: true,
	            showButtonPanel: true,
	            monthNames: ['1월','2월','3월','4월','5월','6월','7월','8월','9월','10월','11월','12월'],
	            monthNamesShort: ['1월','2월','3월','4월','5월','6월','7월','8월','9월','10월','11월','12월'],
	            dateFormat: "yy-mm-dd"
	        });
        if (!$("input[type=month]").attr("readonly"))
	        $("input[type=month]").monthpicker({
	            monthNames: ['1월', '2월', '3월', '4월', '5월', '6월', '7월', '8월', '9월', '10월', '11월', '12월'],
	            monthNamesShort: ['1월', '2월', '3월', '4월', '5월', '6월', '7월', '8월', '9월', '10월', '11월', '12월'],
	            changeYear: true,
	            dateFormat: "yy-mm"
	        });
	}
}
var textareaResize = function(el) {
    el.style.height = "5px";
    el.style.height = (el.scrollHeight)+"px";
}
